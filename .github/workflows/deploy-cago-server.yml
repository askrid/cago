# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.

name: Deploy Cago server to Amazon ECS

on:
  push:
    branches:
      - main
    paths:
      - cago-server/**

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: cago/cago-server
  ECS_SERVICE: cago-server-service
  ECS_CLUSTER: cago-ecs-cluster
  ECS_TASK_DEFINITION: ./cago-server/ECS-task-definition.json
  CONTAINER_NAME: cago-server

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Create .env file
      id: create-env
      env:
        MODE: PRODUCTION
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: $${{ secrets.DB_HOST }}
      run: |
        touch ./cago-server/.env
        echo MODE=$MODE >> ./cago-server/.env
        echo DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY >> ./cago-server/.env
        echo DB_PASSWORD=$DB_PASSWORD >> ./cago-server/.env
        echo DB_HOST=$DB_HOST >> ./cago-server/.env

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cat ./cago-server/.env
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./cago-server
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
